service: ip-idea

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"
  apiGateway:
    restApiId:
      'Fn::ImportValue': ip-${self:provider.stage}-ApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': ip-${self:provider.stage}-ApiGateway-rootResourceId
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${file(../../config.${self:provider.stage}.json):REGION}
    AUTH0_DOMAIN: ${file(../../config.${self:provider.stage}.json):AUTH0_DOMAIN}
    AUTH0_AUDIENCE: ${file(../../config.${self:provider.stage}.json):AUTH0_AUDIENCE}
    AUTH0_CLIENT_ID: ${file(../../config.${self:provider.stage}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${file(../../config.${self:provider.stage}.json):AUTH0_CLIENT_SECRET}
    AUTH0_CONNECTION: ${file(../../config.${self:provider.stage}.json):AUTH0_CONNECTION}

custom: ${file(../custom.yml)}

package:
  include:
    - ../auth.py
    - ../common.py
    - ../../base_storage/*
    - ../../base_storage/repo_interfaces/*
    - ../../dynamodb_storage/*
    - ../../dynamodb_storage/repositories/*

functions:
  create_idea:
    handler: handler.create_idea
    name: ${self:service}-${self:provider.stage}-create-idea
    description: Handle create a new idea
    timeout: 20
    events:
      - http:
          path: ideas
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:ip-auth-${self:provider.stage}.apiGatewayAuthorizer}

  update_idea:
    handler: handler.update_idea
    name: ${self:service}-${self:provider.stage}-update-idea
    description: Handle update an idea
    timeout: 20
    events:
      - http:
          path: ideas/{entity_id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                entity_id: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:ip-auth-${self:provider.stage}.apiGatewayAuthorizer}

  delete_idea:
    handler: handler.delete_idea
    name: ${self:service}-${self:provider.stage}-delete-idea
    description: Handle delete an idea
    timeout: 20
    events:
      - http:
          path: ideas/{entity_id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                entity_id: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:ip-auth-${self:provider.stage}.apiGatewayAuthorizer}


  get_ideas:
    handler: handler.get_ideas
    name: ${self:service}-${self:provider.stage}-get-ideas
    description: Get ideas
    timeout: 20
    events:
      - http:
          path: ideas
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                page: false
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:ip-auth-${self:provider.stage}.apiGatewayAuthorizer}


plugins:
  - serverless-python-requirements